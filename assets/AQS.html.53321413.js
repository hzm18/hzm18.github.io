import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.607a63cf.js";const t={},e=p(`<h1 id="abstractqueuedsynchronizer" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer" aria-hidden="true">#</a> AbstractQueuedSynchronizer</h1><blockquote><p>Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.</p><p>\u63D0\u4F9B\u4E00\u4E2A\u6846\u67B6\u6765\u5B9E\u73B0\u4F9D\u8D56\u4E8E\u5148\u8FDB\u5148\u51FA (FIFO) \u7B49\u5F85\u961F\u5217\u7684\u963B\u585E\u9501\u548C\u76F8\u5173\u7684\u540C\u6B65\u5668\uFF08\u4FE1\u53F7\u91CF\u3001\u4E8B\u4EF6\u7B49\uFF09</p></blockquote><p>\u7B49\u5F85\u961F\u5217\u662F&quot;CLH&quot;\u9501\u5B9A\u961F\u5217\u7684\u53D8\u4F53\u3002</p><p>\u5305\u62EC<code>ReentrantLock</code>\u3001<code>Semaphore</code> \u90FD\u662F\u4F7F\u7528<code>AQS</code>\u5B8C\u6210\u3002</p><p>\u672C\u6587\u7684\u6E90\u7801\u53C2\u8003\u81EA<code>Oracle Open JDK 18</code>\u3002</p><h2 id="aqs\u672C\u7C7B\u4E2D\u7684\u90E8\u5206\u5B57\u6BB5\u3001\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#aqs\u672C\u7C7B\u4E2D\u7684\u90E8\u5206\u5B57\u6BB5\u3001\u65B9\u6CD5" aria-hidden="true">#</a> AQS\u672C\u7C7B\u4E2D\u7684\u90E8\u5206\u5B57\u6BB5\u3001\u65B9\u6CD5</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u72EC\u5360\u6A21\u5F0F\u7684Node\uFF0C\u53EA\u80FD\u7531\u4E00\u4E2A\u7EBF\u7A0B\u83B7\u53D6\uFF0C\u5982\u53EF\u91CD\u5165\u9501ReenterantLock</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ExclusiveNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token comment">// \u5171\u4EAB\u6A21\u5F0F\u7684Node\uFF0C\u53EF\u540C\u65F6\u88AB\u591A\u4E2A\u7EBF\u7A0B\u83B7\u53D6\uFF0C\u5982\u4FE1\u53F7\u91CFSemaphore\u7B49</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SharedNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5173\u4E8E<code>CLH Nodes</code>\u7684<code>status</code>\u7684\u5E38\u91CF\u5B9A\u4E49\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WAITING</span>   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// must be 1</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span> <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span> <span class="token comment">// must be negative</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COND</span>      <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment">// in a condition wait</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90E8\u5206\u5B57\u6BB5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* \u7B49\u5F85\u961F\u5217\u7684\u5934\u8282\u70B9\uFF0C\u5F53node\u7B2C\u4E00\u6B21\u52A0\u5165\u961F\u5217\u65F6\u521D\u59CB\u5316
*/</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* \u7B49\u5F85\u961F\u5217\u7684\u5C3E\u8282\u70B9\uFF0C\u521D\u59CB\u5316\u540E\u53EA\u80FD\u901A\u8FC7 #casTail\u65B9\u6CD5 \u4EE5CAS\u7684\u65B9\u5F0F\u4FEE\u6539
*/</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* \u540C\u6B65\u72B6\u6001\u503C
*/</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>

<span class="token comment">// Unsafe\u7C7B</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> <span class="token class-name">U</span> <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AQS\u4E2Dstate\u5B57\u6BB5\u504F\u79FB</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">STATE</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AQS\u4E2D\u5934\u8282\u70B9\u5B57\u7684\u504F\u79FB</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">HEAD</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AQS\u4E2D\u5C3E\u8282\u70B9\u5B57\u6BB5\u504F\u79FB</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">TAIL</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;tail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90E8\u5206\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
* CAS\u65B9\u5F0F\u4FEE\u6539state
*/</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">STATE</span><span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
* CAS\u65B9\u5F0F\u4FEE\u6539\u7B49\u5F85\u961F\u5217\u5C3E\u8282\u70B9
*/</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">casTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">TAIL</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
* \u5C1D\u8BD5\u521D\u59CB\u5316\u7B49\u5F85\u5217\u8868\u5934\u8282\u70B9
* \u4F7F\u7528\u4E00\u4E2AExclusiveNode\u7684dummy node\u901A\u8FC7CAS\u65B9\u5F0F\u8BBE\u7F6E\u4E3A\u5934\u8282\u70B9
*/</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tryInitializeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExclusiveNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">HEAD</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tail <span class="token operator">=</span> h<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
* \u5C06node\u585E\u5165\u7B49\u5F85\u961F\u5217
*/</span>
<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">setPrevRelaxed</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// \u8BBE\u7F6Enode\u524D\u9A71\u8282\u70B9\u4E3A\u73B0\u5C3E\u8282\u70B9 (\u539F\u6CE8\u91CA:avoid unnecessary fence.\u4E3A\u4EC0\u4E48\u80FD\u907F\u514D\u4E0D\u5FC5\u8981\u7684fence?)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                 <span class="token comment">// \u5982\u679C\u5C3E\u8282\u70B9\u4E3A\u7A7A\uFF0C\u5219\u5C1D\u8BD5\u521D\u59CB\u5316\u5934\u8282\u70B9</span>
                <span class="token function">tryInitializeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	   <span class="token comment">// \u5C1D\u8BD5\u540E\u7EE7\u7EED</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// \u5C1D\u8BD5\u4FEE\u6539\u5C3E\u8282\u70B9tail\u4E3Anode</span>
                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>			   <span class="token comment">// \u5C06\u65E7\u5C3E\u8282\u70B9\u7684\u540E\u7EE7\u8282\u70B9\u4FEE\u6539\u4E3Anode</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment">// wake up to clean link</span>
                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
* \u4ECE\u7B49\u5F85\u961F\u5217\u4ECE\u540E\u5F80\u524D\u627E\uFF0Cnode\u662F\u5426\u5DF2\u7ECF\u5728\u961F\u5217\u4E2D
*/</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isEnqueued</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> node<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* \u5524\u9192\u7ED9\u5B9A\u8282\u70B9h\u7684\u540E\u7EE7\u8282\u70B9\uFF08\u5982\u679C\u6709\uFF09
*/</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">signalNext</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span><span class="token function">getAndUnsetStatus</span><span class="token punctuation">(</span><span class="token constant">WAITING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// \u5C06\u7ED9\u5B9A\u8282\u70B9\u7684\u540E\u7EE7\u8282\u70B9\u7684WAITING\u53BB\u6389</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// \u5524\u9192\u540E\u7EE7\u8282\u70B9\u7684\u7B49\u5F85\u7EBF\u7A0B</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD8\u6709\u4EE3\u7801\u6BD4\u8F83\u957F\u7684<code>acquire</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shared<span class="token punctuation">,</span>
                      <span class="token keyword">boolean</span> interruptible<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> spins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> postSpins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// retries upon unpark of first thread</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>	 <span class="token comment">// \u5F53\u524D\u662F\u5426\u5DF2\u6709\u4E2D\u65AD</span>
    			first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>			 <span class="token comment">// \u662F\u5426\u4E3A\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF08\u975Edummy head\uFF09</span>
        <span class="token class-name">Node</span> pred <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// predecessor of node when enqueued</span>

        <span class="token comment">/*
         * Repeatedly:
         *  Check if node now first
         *    if so, ensure head stable, else ensure valid predecessor
         *  if node is first or not yet enqueued, try acquiring
         *  else if node not yet created, create it
         *  else if not yet enqueued, try once to enqueue
         *  else if woken from park, retry (up to postSpins times)
         *  else if WAITING status not set, set and retry
         *  else park and clear WAITING status, and check cancellation
         */</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>first <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pred <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                <span class="token operator">!</span><span class="token punctuation">(</span>first <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// \u5982\u679C\u5DF2\u7ECF\u521D\u59CB\u5316\u4E86\uFF0C</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">cleanQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// predecessor cancelled</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">onSpinWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ensure serialization</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">||</span> pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// </span>
                <span class="token keyword">boolean</span> acquired<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>shared<span class="token punctuation">)</span>
                        acquired <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        acquired <span class="token operator">=</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// \u518D\u6B21\u5C1D\u8BD5\u4EE5\u72EC\u5360\u6A21\u5F0F\u83B7\u53D6</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> interrupted<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// \u5F02\u5E38\u4E86\uFF0C\u53D6\u6D88\u83B7\u53D6</span>
                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>						<span class="token comment">// \u5982\u679C\u83B7\u53D6\u6210\u529F\u4E14\u4E3A\u7B2C\u4E00\u6B21</span>
                        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>				<span class="token comment">// \u8BBE\u7F6Enode\u7684\u524D\u9A71\u8282\u70B9\u4E3Anull</span>
                        head <span class="token operator">=</span> node<span class="token punctuation">;</span>					<span class="token comment">// \u5F53\u524D\u7684\u5934\u8282\u70B9\u8BBE\u7F6E\u4E3Anode</span>
                        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>				<span class="token comment">// \u524D\u9A71\u8282\u70B9</span>
                        node<span class="token punctuation">.</span>waiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>				<span class="token comment">// </span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>shared<span class="token punctuation">)</span>
                            <span class="token function">signalNextIfShared</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span>
                            current<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// \u5982\u679C\u4F20\u5165\u7684node\u4E3A\u7A7A\u5219\u6839\u636Eshared\u9009\u62E9\u521B\u5EFA\u5171\u4EAB\u8FD8\u662F\u6392\u4ED6\u7684node</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>shared<span class="token punctuation">)</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExclusiveNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// \u524D\u9A71\u8282\u70B9\u4E3A\u7A7A\uFF0C\u610F\u5473\u7740\u7B2C\u4E00\u6B21\u5165\u961F</span>
                node<span class="token punctuation">.</span>waiter <span class="token operator">=</span> current<span class="token punctuation">;</span>			<span class="token comment">// \u628A\u4F20\u5165\u7684node\u6216\u4E4B\u524D\u521B\u5EFA\u7684node\u8BBE\u7F6E\u5176waiter\u7EBF\u7A0B\u4E3A\u5F53\u524D\u7EBF\u7A0B</span>
                <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>
                node<span class="token punctuation">.</span><span class="token function">setPrevRelaxed</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// avoid unnecessary fence</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">tryInitializeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// \u5982\u679Ct(\u5373tail)\u4E3A\u7A7A\uFF0C\u5219\u521D\u59CB\u5316\u961F\u5217\uFF08\u585E\u5165dummy node\uFF09</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span>		<span class="token comment">// CAS\u5C1D\u8BD5\u628A\u8BE5node\u8BBE\u7F6E\u5230tail\u5B57\u6BB5</span>
                    node<span class="token punctuation">.</span><span class="token function">setPrevRelaxed</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5931\u8D25\u4E86\u5C31\u653E\u5F03\u521A\u521A\u8BBE\u7F6E\u7684t\uFF08\u4E0B\u6B21\u91CD\u8BD5\uFF09</span>
                <span class="token keyword">else</span>
                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>				<span class="token comment">// \u5982\u679CCAS\u66FF\u6362tail\u5B57\u6BB5\u6210\u529F\u5219\u8BBE\u7F6E\u65E7\u7684tail\u8282\u70B9\u7684next\u4E3Anode</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> spins <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">--</span>spins<span class="token punctuation">;</span>                        <span class="token comment">// reduce unfairness on rewaits</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">onSpinWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// NOOP\uFF0C\u53EF\u80FD\u540E\u9762\u865A\u62DF\u673A\u4F1A\u6709\u76F8\u5173\u4F18\u5316\uFF1F\uFF08\u6BD4\u5982\u81EA\u65CB\u65F6\u51CF\u5C11CPU\u5360\u7528\uFF1F\uFF09</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// \u68C0\u67E5\u4E00\u4E0B\u5982\u679Cstatus\u4E3A0\u5219\u8BBE\u7F6E\u4E3A\u7B49\u5F85\u7684\u72B6\u6001\u503C</span>
                node<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">WAITING</span><span class="token punctuation">;</span>          <span class="token comment">// \u8BBE\u7F6E\u4E3A\u7B49\u5F85\u7684\u72B6\u6001\u503C</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> nanos<span class="token punctuation">;</span>
                spins <span class="token operator">=</span> postSpins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>postSpins <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timed<span class="token punctuation">)</span>
                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// \u5982\u679C\u6CA1\u6709\u7B49\u5F85\u65F6\u95F4\u53C2\u6570\uFF0C\u5219\u7ACB\u5373\u5C06\u5C06\u7EBF\u7A0B\u8FDB\u5165\u7B49\u5F85</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nanos <span class="token operator">=</span> time <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// \u5E26\u65F6\u95F4\u7684\u7B49\u5F85</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span><span class="token function">clearStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// \u5524\u9192\u540E\u91CD\u7F6Estatus\u4E3A0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interrupted <span class="token operator">|=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptible<span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> interrupted<span class="token punctuation">,</span> interruptible<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5173\u4E8E\u53D6\u6D88\u83B7\u53D6\u7684\u65B9\u6CD5<code>cancelAcquire</code>\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">boolean</span> interrupted<span class="token punctuation">,</span>
                          <span class="token keyword">boolean</span> interruptible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>waiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>			<span class="token comment">// \u8BBE\u7F6E\u7B49\u5F85\u7EBF\u7A0B\u4E3Anull</span>
        node<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">CANCELLED</span><span class="token punctuation">;</span>	<span class="token comment">// \u72B6\u6001\u8BBE\u7F6E\u4E3A\u53D6\u6D88</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>		<span class="token comment">// \u5982\u679C\u8BE5\u8282\u70B9\u7684\u524D\u9A71\u8282\u70B9\u4E0D\u4E3A\u7A7A\u5219\u5C1D\u8BD5\u6E05\u7406\u961F\u5217\u4E2D</span>
            <span class="token function">cleanQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptible<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">CANCELLED</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6E05\u7406\u961F\u5217\u65B9\u6CD5<code>cleanQueue</code>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cleanQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">// \u4E0D\u65AD\u8FDB\u884C\u91CD\u8BD5</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> q <span class="token operator">=</span> tail<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// p-&gt;q-&gt;s</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> q<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>                      <span class="token comment">// \u5224\u65AD\u4E0B\u662F\u5426\u5DF2\u7ECF\u5904\u7406\u5230\u6700\u540E\u7684\u8282\u70B9\u4E86</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> tail <span class="token operator">!=</span> q <span class="token operator">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>prev <span class="token operator">!=</span> q <span class="token operator">||</span> s<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>                       <span class="token comment">// \u68C0\u67E5\u4E00\u4E0B\u5982\u679C\u8282\u70B9\u95F4\u5173\u7CFB\u6216\u72B6\u6001\u4E0D\u5BF9\u5C31\u91CD\u6765</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// \u5982\u679C\u904D\u5386\u5230\u7684\u8282\u70B9\u662F\u53D6\u6D88\u72B6\u6001</span>
                <span class="token comment">// \u5982\u679C\u662Ftail\u8282\u70B9\u5219\u6267\u884CcasTail\u5C06tail\u66FF\u6362\u4E3Atail\u7684\u524D\u9A71\u8282\u70B9\uFF1B</span>
                <span class="token comment">// \u5426\u5219\uFF0C\u7531\u4E8E\u662F\u4ECE\u540E\u5F80\u524D\u5904\u7406\uFF0C\u628A\u540E\u9762\u7B2C\u4E00\u4E2A\u7684\u975E\u53D6\u6D88\u72B6\u6001\u7684\u8282\u70B9s\u63A5\u5230\u5B83\u7684\u524D\u9A71\u7684\u524D\u9A71\u8282\u70B9p\uFF0C</span>
                <span class="token comment">// \u76F8\u5F53\u4E8E\u628Aq\u65AD\u5F00\u4E86\uFF0C\u540C\u65F6\u5224\u65AD\u4E00\u4E0B\u5173\u7CFBq\u7684\u524D\u9A71\u8282\u70B9\u786E\u5B9E\u662Fp\u7684\u6761\u4EF6</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">casTail</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">casPrev</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>prev <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// \u4FEE\u6539\u4E0B\u5DF2\u7ECF\u662Fs\u7684\u524D\u9A71\u8282\u70B9\u7684p\u7684\u540E\u7EE7\u8282\u70B9\u4E3As\uFF08CAS\u5931\u8D25\u4E86\u53EF\u4EE5\u5FFD\u7565\uFF09</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>		 <span class="token comment">// \u5982\u679Cp\u7684\u524D\u9A71\u8282\u70B9\u4E3A\u7A7A\u610F\u5473\u7740\u5F53\u524D\u5DF2\u7ECFhead\u4E86</span>
                        <span class="token function">signalNext</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>		 <span class="token comment">// \u7ACB\u5373\u53BB\u6389\u4E0B\u4E00\u4E2A\u7B49\u5F85\u4E2D\u7684node\u7684\u7B49\u5F85\u72B6\u6001\u5E76\u5524\u9192\u8BE5node\u7684\u7B49\u5F85\u7EBF\u7A0B</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5982\u679Cp.next == q\uFF0C\u4F46\u662Fq.prev != p\uFF0C\u5219\u5C1D\u8BD5\u4FEE\u590D\u8FD9\u4E2A\u5173\u8054\u5173\u7CFB</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// help finish</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>prev <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>	
                    p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>		<span class="token comment">// \u5982\u679Cp\u7684\u524D\u9A71\u8282\u70B9\u4E3A\u7A7A\u610F\u5473\u7740\u5F53\u524D\u5DF2\u7ECFhead\u4E86</span>
                        <span class="token function">signalNext</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// \u7ACB\u5373\u53BB\u6389\u4E0B\u4E00\u4E2A\u7B49\u5F85\u4E2D\u7684node\u7684\u7B49\u5F85\u72B6\u6001\u5E76\u5524\u9192\u8BE5node\u7684\u7B49\u5F85\u7EBF\u7A0B</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            s <span class="token operator">=</span> q<span class="token punctuation">;</span>		<span class="token comment">// \u4FDD\u5B58\u5F53\u524D\u8282\u70B9</span>
            q <span class="token operator">=</span> q<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>	<span class="token comment">// \u65E7\u7684\u5F53\u524D\u8282\u70B9\u5F80\u524D\u632A</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5C1D\u8BD5\u83B7\u53D6\u72EC\u5360\u9501<code>acquire</code>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// \u5C1D\u8BD5\u83B7\u53D6\u9501\uFF0C\u5931\u8D25\u4E86\u5219\u628A\u5F53\u524D\u7EBF\u7A0B\u52A0\u5165\u7B49\u5F85\u961F\u5217\u4E2D</span>
        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u91CA\u653E\uFF0C\u89E3\u9664\u7EBF\u7A0B\u963B\u585E<code>release</code>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// \u5C1D\u8BD5\u89E3\u9501\uFF0C\u7531\u5B50\u7C7B\u5B9E\u73B0\uFF0C\u8FD4\u56DEtrue\u5219\u5C1D\u8BD5\u5524\u9192\u7B2C\u4E00\u4E2A\u771F\u5B9E\u7684\u7B49\u5F85\u8282\u70B9</span>
        <span class="token function">signalNext</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u62BD\u8C61\u9759\u6001\u5185\u90E8\u7C7Bnode" tabindex="-1"><a class="header-anchor" href="#\u62BD\u8C61\u9759\u6001\u5185\u90E8\u7C7Bnode" aria-hidden="true">#</a> \u62BD\u8C61\u9759\u6001\u5185\u90E8\u7C7BNode</h2><p>\u7B49\u5F85\u961F\u5217\u4E2D\u585E\u5165\u7684\u5143\u7D20\u662F<code>AQS</code>\u7C7B\u4E2D\u7684\u62BD\u8C61\u9759\u6001\u5185\u90E8\u7C7B<code>Node</code>\u7684\u5B50\u7C7B\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>       <span class="token comment">// \u524D\u9A71\u8282\u70B9\uFF0C\u521D\u59CB\u5316\u65F6\u5C06\u8BBE\u7F6E\u4E3Adummy node</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>       <span class="token comment">// visibly nonnull when signallable</span>
    <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span>            <span class="token comment">// \u6392\u961F\u7B49\u5F85\u7684\u7EBF\u7A0B</span>
    <span class="token keyword">volatile</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>      <span class="token comment">// written by owner, atomic bit ops by others</span>

    <span class="token comment">// \u5B9A\u4E49\u4E86\u4E00\u4E9B**atomic**\u64CD\u4F5C\u7684\u65B9\u6CD5</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">casPrev</span><span class="token punctuation">(</span><span class="token class-name">Node</span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u901A\u8FC7CAS\u4EA4\u6362\u524D\u9A71\u8282\u70B9</span>
        <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">weakCompareAndSetReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">PREV</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">casNext</span><span class="token punctuation">(</span><span class="token class-name">Node</span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u901A\u8FC7CAS\u4EA4\u6362\u540E\u7EE7\u8282\u70B9</span>
        <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">weakCompareAndSetReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">NEXT</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndUnsetStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// \u83B7\u53D6\u5F53\u524Dstatus\u4E14unset\u6389\u4F20\u5165\u7684\u4E3Av\u7684bit</span>
        <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getAndBitwiseAndInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">STATUS</span><span class="token punctuation">,</span> <span class="token operator">~</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPrevRelaxed</span><span class="token punctuation">(</span><span class="token class-name">Node</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// \u8BBE\u7F6E\u524D\u9A71\u8282\u70B9\u503C</span>
        <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">PREV</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setStatusRelaxed</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// \u8BBE\u7F6Estatus\u503C</span>
        <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">STATUS</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">clearStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">// \u8BBE\u7F6Estatus\u4E3A0,\u4F7F\u7528volatile\u8BBE\u7F6E</span>
        <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putIntOpaque</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">STATUS</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// \u5148\u4F7F\u7528Unsafe\u4FDD\u5B58Node\u7C7B\u4E0A\u8BE5field\u7684offset\uFF0C\u4FBF\u4E8E\u540E\u9762Unsafe\u5BF9\u8BE5\u5B57\u6BB5\u7684atomic\u64CD\u4F5C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">STATUS</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">NEXT</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;next&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">PREV</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;prev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u91CC\u9762\u8FD8\u6709\u4E2A\u7C7B\u662F<code>ConditionObject</code>\uFF0C\u8FD8\u4E0D\u6E05\u695A\uFF0C\u540E\u9762\u770B\u4E86\u518D\u8BF4\u3002</p>`,27),o=[e];function c(l,i){return s(),a("div",null,o)}var d=n(t,[["render",c],["__file","AQS.html.vue"]]);export{d as default};
